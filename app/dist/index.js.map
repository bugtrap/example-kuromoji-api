{
  "version": 3,
  "sources": ["../src/index.ts", "../src/normalize-text.ts", "../src/tokenize.ts", "../src/types.ts"],
  "sourcesContent": ["import { APIGatewayProxyEventV2, APIGatewayProxyResultV2 } from \"aws-lambda\";\n\nimport { normalizeText } from \"./normalize-text\";\nimport { tokenize } from \"./tokenize\";\nimport { isRequestPayload } from \"./types\";\n\nexport async function handler(event: APIGatewayProxyEventV2): Promise<APIGatewayProxyResultV2> {\n    try {\n        const payload = JSON.parse(event.body ?? \"{}\");\n        if (!isRequestPayload(payload)) {\n            throw new Error(\"Invalid text\");\n        }\n\n        const text = normalizeText(payload.text);\n        const words = await tokenize(text);\n\n        const origin = event.headers.origin;\n        const corsHeaders = origin\n            ? {\n                  \"Access-Control-Allow-Origin\": origin,\n                  \"Access-Control-Allow-Headers\": \"Content-Type,X-Api-Key\",\n                  \"Access-Control-Allow-Methods\": \"POST\",\n              }\n            : undefined;\n\n        return {\n            statusCode: 200,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...corsHeaders,\n            },\n            body: JSON.stringify({\n                text,\n                words,\n            }),\n        };\n    } catch (ex: unknown) {\n        console.error(ex);\n        return Promise.reject(ex);\n    }\n}\n", "/**\n * \u5F62\u614B\u7D20\u89E3\u6790\u306B\u9069\u3057\u305F\u6587\u5B57\u5217\u3078\u5909\u63DB\u3057\u307E\u3059\n */\nexport function normalizeText(text: string): string {\n    // \u6539\u884C\u3092\u542B\u3080\u9023\u7D9A\u3057\u305F\u7A7A\u767D\u6587\u5B57\u306F 1 \u500B\u306E\u7A7A\u767D\u306B\u7F6E\u304D\u63DB\u3048\u308B\n    const s1 = text.replace(/\\s+/g, \" \");\n    // \u82F1\u6570\u5B57\u3092\u534A\u89D2\u306B\u7D71\u4E00\n    const s2 = s1.replace(/[\uFF21-\uFF3A\uFF41-\uFF5A\uFF10-\uFF19]/g, (s) =>\n        String.fromCharCode(s.charCodeAt(0) - 0xfee0)\n    );\n    return s2;\n}\n", "import { KuromojiToken, getTokenizer } from \"kuromojin\";\n\nexport async function tokenize(text: string): Promise<KuromojiToken[]> {\n    const tokenizer = await getTokenizer();\n    return tokenizer.tokenize(text);\n}\n", "export type RequestPayload = {\n    text: string;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isRequestPayload(payload: any): payload is RequestPayload {\n    if (payload && typeof payload === \"object\" && typeof payload.text === \"string\") {\n        return true;\n    }\n    return false;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACGO,SAAS,cAAc,MAAsB;AAEhD,QAAM,KAAK,KAAK,QAAQ,QAAQ,GAAG;AAEnC,QAAM,KAAK,GAAG;AAAA,IAAQ;AAAA,IAAgB,CAAC,MACnC,OAAO,aAAa,EAAE,WAAW,CAAC,IAAI,KAAM;AAAA,EAChD;AACA,SAAO;AACX;;;ACXA,uBAA4C;AAE5C,eAAsB,SAAS,MAAwC;AACnE,QAAM,YAAY,UAAM,+BAAa;AACrC,SAAO,UAAU,SAAS,IAAI;AAClC;;;ACAO,SAAS,iBAAiB,SAAyC;AACtE,MAAI,WAAW,OAAO,YAAY,YAAY,OAAO,QAAQ,SAAS,UAAU;AAC5E,WAAO;AAAA,EACX;AACA,SAAO;AACX;;;AHJA,eAAsB,QAAQ,OAAiE;AAC3F,MAAI;AACA,UAAM,UAAU,KAAK,MAAM,MAAM,QAAQ,IAAI;AAC7C,QAAI,CAAC,iBAAiB,OAAO,GAAG;AAC5B,YAAM,IAAI,MAAM,cAAc;AAAA,IAClC;AAEA,UAAM,OAAO,cAAc,QAAQ,IAAI;AACvC,UAAM,QAAQ,MAAM,SAAS,IAAI;AAEjC,UAAM,SAAS,MAAM,QAAQ;AAC7B,UAAM,cAAc,SACd;AAAA,MACI,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IACpC,IACA;AAEN,WAAO;AAAA,MACH,YAAY;AAAA,MACZ,SAAS;AAAA,QACL,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACP;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACjB;AAAA,QACA;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ,SAAS,IAAP;AACE,YAAQ,MAAM,EAAE;AAChB,WAAO,QAAQ,OAAO,EAAE;AAAA,EAC5B;AACJ;",
  "names": []
}
